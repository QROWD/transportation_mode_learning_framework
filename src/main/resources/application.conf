general_stettings {
  output_data_dir = "/tmp/qrowd/5th_study"
}

stop_detection {
  gps_accuracy = 200 // in m

  // In some cases we observed the pattern that there were alternating phases of
  // very sparse GPS signals (or even no GPS information at all) and phases with
  // dense GPS readings (i.e. with many GPS points per minute). This confused
  // the clustering based trip detection since essentially many clusters were
  // detected which in turn resulted in the (false) detection of a high number
  // of very short and close trips. To remedy this we perform a post processing
  // step where we merge two consecutive trips if the second one started within
  // <minimum_trip_distance> minutes after the first one ended.
  mininmum_trip_distance = 5 // in minutes

  max_time_gap = 60 // mins

  clustering {

    mode = "tdbscan"
    min_required_points = 1000
    min_avg_speed = 4 // km/h

    tdbscan {
      cEps = 0.3 // in km
      eps = 0.1 // in km
      minPts = 10

      merge {
        time = true
        distance = false
      }

      post_processing {
        drop_small_clusters = false
        drop_small_clusters_size = 40
      }

    }

    stdbscan {
      eps = 0.1 // in km
      tEps = 300 // in seconds
      minPts = 80
    }
  }

  window_distance {
    window_size = 300  // in seconds
    step_size = 60  // in seconds
    distance = 0.25  // in km
    // number of trip segments that may have the characteristics of a non-trip
    // segment, but are ignored to avoid many, very short segments
    noise_segments = 5
    min_nr_of_segments = 7
  }
}

address_retrieval {
  reverse_geo_coding {
    base_url = "https://nominatim.openstreetmap.org/reverse"
    delay = 1 // in seconds
  }
}

poi_retrieval {
  lgd_lookup {
    endpoint_url = "http://rdf.qrowd.aksw.org/sparql"
    distance_radius = 0.15 // in km
  }
}

sqlite_settings {
  db_file = "/tmp/qrowd-pilot-2/pilot2.sqlite"
  start_stop_detection_db_file = "/tmp/qrowd-pilot-2/pilot2-segment.sqlite"
  mode_detection_db_file = "/tmp/qrowd-pilot-2/pilot2-multimodal.sqlite"
}

prediction_settings {
  //r_script_path = "/home/user/work/r/TR"
//  r_server_host = "localhost"
//  r_server_port = 6011
  python_interpreter = "/usr/bin/python"
  python_script_path = "/home/user/transportation_mode_detection/"

  window_size = 120
}

map_matching {
  service = "graphhopper"
  graphhopper {
    //map_matching_url = "http://localhost:8988/match"
    //routing_url = "http://localhost:8988/route"
    map_matching_url = "http://qrowd1.aksw.uni-leipzig.de:8988/match"
    routing_url =      "http://qrowd1.aksw.uni-leipzig.de:8988/route"
  }
}

provenance_tracking {
  output_dir = "/tmp/qrowd/5th_study/provenance/"
}